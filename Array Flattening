const arraynested = [1, [2, [3, [4, [5]]]]]; // Let's take this example of deeply nested array

function arrayflatten(arr) { // Here we have defined a function which takes the parameter arr which is the nested array needed to be flatten
    return arr.reduce((acc, val) => { // reduce method iterates over each element in the array accumulating a result into a single output value
// accumulator stores the accumulated value and val stores the current value being processed
        return Array.isArray(val) // This line checks if the current value val is an array using Array.isArray(). If val is an array, the condition evaluates to true; otherwise, it evaluates to false
            ? acc.concat(arrayflatten(val)) // If val is an array, this part is executed
// The function calls itself recursively: arrayflatten(val)
// The result of this recursive call is then concatenated to the accumulator acc using concat(), which combines the two arrays
            : acc.concat(val); // If val is not an array, this part is executed , It directly concatenates val to the accumulator acc
    }, []); // This empty array [] is passed as the second argument to reduce(), which serves as the initial value of the accumulator acc
}

const flattenedArray = arrayflatten(arraynested); // This line calls the arrayflatten function with arraynested as the argument and stores the result in flattenedArray
// After this operation, flattenedArray will contain all the elements of arraynested, flattened into a single-level array
console.log(flattenedArray); // Here we Print the flattened array to the console
